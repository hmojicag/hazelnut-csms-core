using Hazelnut.Core.DropboxApiV2;
using Hazelnut.Core.DropboxApiV2.Files;
using System.Threading.Tasks;
using Hazelnut.Core.DropboxApiV2.Users;
using System;
using System.IO;
using System.Text;

using Hazelnut.Core.HCloudStorageServices;
using Hazelnut.Core.HUsers;
using Hazelnut.Core.HFiles;
using System.Collections.Generic;

namespace Hazelnut.Core {
    public class HCloudSync {

        public enum SyncType {
            DUPLICATED,
            DISTRIBUTED
        }

        public HCloudSync(HUser user, List<HCloudStorageServiceData> hcssData) {

        }

        public HFileStructure ApplyDuplicatedSync() {

            return null;
        }

        //DUMMY CODE THAT SHOULD BE DELETED
        //FROM HERE TO ALL BELOW
        public HCloudSync() {

            //This is just a test for the DropBox API
            //string oauth2AccessToken = "YkSN6i4mCBAAAAAAAAAAB7ElQjewrG1XmIw9W1tEWDZfofOBjMqWXKUabW76_Yb_";
            //DropboxClient dbx = new DropboxClient(oauth2AccessToken);
            //getAccount(dbx).Wait();
            //ListFullDropBox(dbx).Wait();
            //DownloadAsync(dbx).Wait();
            //UploadAsync(dbx).Wait();
            //GetMetadata(dbx).Wait();
            //DeleteAsync(dbx).Wait();
        }

        
        private async Task getAccount(DropboxClient dbx) {
            Account account = await dbx.GetCurrentAccountAsync();
        }

        private async Task ListFullDropBox(DropboxClient dbx) {
            await dbx.ListFullDropBoxAsync();
        }

        private async Task DownloadAsync(DropboxClient dbx) {
            MemoryStream memoryStream = await dbx.DownloadAsync("id:-sUUqp8epSAAAAAAAAAABA");
            using (System.IO.FileStream fs = System.IO.File.Create(@"C:\testfolder\lol.pdf"))
            {
                memoryStream.WriteTo(fs);
            }
        }

        private async Task UploadAsync(DropboxClient dbx) {
            MemoryStream memoryStream = new MemoryStream();
            UnicodeEncoding uniEnconding = new UnicodeEncoding();
            byte[] testFileContent = uniEnconding.GetBytes(
                "This is an auto generated test file"
            );
            memoryStream.Write(testFileContent, 0, testFileContent.Length);
            string fileName = "/autoGeneratedTestFile-" + DateTime.Now.ToString("dd-MM-yyyy_hh_mm") + ".txt";
            await dbx.UploadAsync(memoryStream, fileName);
        }

        private async Task GetMetadataAsync(DropboxClient dbx) {
            FileMetadata fileMetadata = await dbx.GetMetadataAsync("/test-lv0-0.txt");
            Console.WriteLine("FileMetadata:");
            Console.WriteLine("Path Lower: " + fileMetadata.PathLower);
            Console.WriteLine("Id: " + fileMetadata.Id);
            Console.WriteLine("Rev: " + fileMetadata.Rev);
        }

        private async Task DeleteAsync(DropboxClient dbx) {
            Metadata metadata = await dbx.DeleteAsync("/autoGeneratedTestFile-06-07-2017_02_46.txt");
            Console.WriteLine("Item deleted: ");
            if(metadata.IsFile) {
                FileMetadata fileMetadata = (FileMetadata)metadata;
                Console.Write("File");
                Console.WriteLine("Path Lower: " + fileMetadata.PathLower);
                Console.WriteLine("Id: " + fileMetadata.Id);
                Console.WriteLine("Rev: " + fileMetadata.Rev);
            } else {
                Console.Write("Folder");
                FolderMetadata folderMetadata = (FolderMetadata)metadata;
                Console.WriteLine("Path Lower: " + folderMetadata.PathLower);
            }
        }

    }
}